/*
 * Copyright 2018 Hippo Seven
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hippo.android.largeimage;

/*
 * Created by Hippo on 2018/1/11.
 */

import android.graphics.Bitmap;
import android.graphics.Rect;
import android.support.annotation.CallSuper;
import android.support.annotation.Nullable;

public abstract class LargeRegionDecoder {

  @Nullable
  private Bitmap preview;
  private int previewSample;

  /**
   * Returns the preview generated by {@link #generatePreview()}.
   *
   * @see #generatePreview()
   * @see #getPreviewSample()
   */
  @Nullable
  public Bitmap getPreview() {
    return preview;
  }

  /**
   * Returns the sample of the preview generated by {@link #generatePreview()}.
   *
   * @see #generatePreview()
   * @see #getPreview()
   */
  public int getPreviewSample() {
    return previewSample;
  }

  /**
   * Returns the width of the image.
   */
  public abstract int getWidth();

  /**
   * Returns the height of the image.
   */
  public abstract int getHeight();

  /**
   * Decodes a region for the image.
   */
  @Nullable
  public abstract Bitmap decode(Rect rect, int sample);

  /**
   * Recycles this LargeRegionDecoder.
   */
  @CallSuper
  public void recycle() {
    if (preview != null) {
      preview.recycle();
      preview = null;
    }
  }

  /**
   * Generates preview for this LargeRegionDecoder.
   *
   * It only need be called once in factory.
   *
   * @see #getPreview()
   * @see #getPreviewSample()
   */
  protected final void generatePreview() {
    float maxSize = (float) LargeDrawable.LARGE_IMAGE_THRESHOLD;
    int widthScale = (int) Math.ceil((float) getWidth() / maxSize);
    int heightScale = (int) Math.ceil((float) getHeight() / maxSize);
    previewSample = Math.max(1, Math.max(Utils.nextPow2(widthScale), Utils.nextPow2(heightScale)));

    Rect rect = new Rect(0, 0, getWidth(), getHeight());
    preview = decode(rect, previewSample);
  }
}
